
#include "dec.h"

#define CLIP(val, min, max) (((val) > (max)) ? (max) : (((val) < (min)) ? (min) : (val)))

CDec::CDec()
{
    m_width = m_height = -1;
}

CDec::CDec( int width, int height )
: m_width( width ), 
  m_height( height )
{
}

CDec::~CDec()
{
}

CDec::CDec( const CDec & inst )
{
    *this = inst;
}

const CDec & CDec::operator=( const CDec & inst )
{
    if ( this != &inst )
    {
        m_width  = inst.m_width;
        m_height = inst.m_height;
    }
    return *this;
}

bool CDec::decodeYuyv( const ::Types::TByteArray & raw, QImage & img )
{
    verifySize( img );

    m_data.resize( m_width * m_height * 3 );
    int z = 0;
    int ind = 0;
    int indOut = 0;
    for ( int y=0; y<m_height; y++ )
    {
        for ( int x=0; x<m_width; x++ )
        {
            int y = ( z==0 ) ? (static_cast<int>(raw[ind]) << 8) :
                               (static_cast<int>(raw[ind+2]) << 8);
            int u = static_cast<int>(raw[ind+1]) - 128;
            int v = static_cast<int>(raw[ind+3]) - 128;
            int r = (y + (359 * v)) >> 8;
            int g = (y - (88  * u) - (183 * v)) >> 8;
            int b = (y + (454 * u)) >> 8;

            m_data[ indOut++ ] = static_cast<unsigned char>( CLIP(r, 0x00, 0xFF) );
            m_data[ indOut++ ] = static_cast<unsigned char>( CLIP(g, 0x00, 0xFF) );
            m_data[ indOut++ ] = static_cast<unsigned char>( CLIP(b, 0x00, 0xFF) );
            if (z++)
            {
                z = 0;
                ind += 4;
            }
        }
    }

    ind = 0;
    for ( int y=0; y<m_height; y++ )
    {
        for ( int x=0; x<m_width; x++ )
        {
            int r = m_data[ ind++ ];
            int g = m_data[ ind++ ];
            int b = m_data[ ind++ ];
            img.setPixel( x, y, qRgb( r, g, b ) );
        }
    }
    return true;
}

bool CDec::decodePjpg( const ::Types::TByteArray & raw, QImage & img )
{
    verifySize( img );
    int dhtRes = verifyDhtTable( raw );
    QBuffer b( &m_data );
    b.open( QIODevice::WriteOnly );
    bool res = img.load( &b, "JPG" );
    b.close();

    return res;
}

bool CDec::encodePng( const QImage & img, ::Types::TByteArray & data )
{
    m_data.clear();
    QBuffer b( &m_data );
    b.open( QIODevice::WriteOnly );
    img.save( &b, "PNG" );
    b.close();
    
    data.clear();
    data.reserve( m_data.size() );

    char * orig = reinterpret_cast<char *>( m_data.data() );
    for ( int i=0; i<m_data.size(); i++ )
        data.push_back( orig[i] );
    return true;
}

void CDec::verifySize( QImage & img )
{
    if ( ( img.size().width() != m_width ) || ( img.size().height() != m_height ) )
        img = QImage(m_width, m_height, QImage::Format_RGB888 );
}

int CDec::verifyDhtTable( const ::Types::TByteArray & raw )
{
	static unsigned char dht[] =
	{
		0xff, 0xc4, 0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x09, 0x0a, 0x0b, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02,
		0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7d,
		0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21, 0x31,
		0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32,
		0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52,
		0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16,
		0x17, 0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a,
		0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45,
		0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57,
		0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
		0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83,
		0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94,
		0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
		0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
		0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
		0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
		0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8,
		0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8,
		0xf9, 0xfa, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01,
		0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,
		0x0b, 0x11, 0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04,
		0x07, 0x05, 0x04, 0x04, 0x00, 0x01, 0x02, 0x77, 0x00, 0x01,
		0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31, 0x06, 0x12, 0x41,
		0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08, 0x14,
		0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0,
		0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25,
		0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a,
		0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46,
		0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
		0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
		0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83,
		0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94,
		0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5,
		0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6,
		0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
		0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8,
		0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9,
		0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa
	};
	unsigned char *p, *i = 0;
	
	/* By default we simply return the source image. */
    m_rawJpg.resize( raw.size() );
    unsigned char * dest = reinterpret_cast<unsigned char *>( m_rawJpg.data() );
    for ( unsigned i=0; i<raw.size(); i++ )
        dest[i] = raw.at( i );
    unsigned char * src = reinterpret_cast<unsigned char *>( dest );
	
	/* Scan for an existing DHT segment or the first SOS segment. */
	for(p = src + 2; p - src < m_rawJpg.size() - 3 && i == 0; )
	{
		if(*(p++) != 0xFF)
            continue;
		
		if(*p == 0xD9)
            break;            /* JPEG_EOI */
		if(*p == 0xC4)
            return (0);       /* JPEG_DHT */
		if(*p == 0xDA && !i)
            i = p - 1; /* JPEG_SOS */
		
		/* Move to next segment. */
		p += (p[1] << 8) + p[2];
	}
	
	/* If no SOS was found, insert the DHT directly after the SOI. */
	if(i == 0)
        i = src + 2;
	
	//DEBUG("Inserting DHT segment into JPEG frame.");
	
	unsigned sz = m_rawJpg.size() + sizeof(dht);
	m_data.resize( sz );
	if( m_data.size() < static_cast<int>(sz) )
		//ERROR("Out of memory.");
		return (-1);
	
	/* Copy the JPEG data, inserting the DHT segment. */
	memcpy(( p = reinterpret_cast<unsigned char *>( m_data.data() ) ), src, i - src);
	memcpy(( p += i - src ), dht, sizeof(dht));
	memcpy(( p += sizeof(dht) ), i, m_rawJpg.size() - (i - src));
	
	return (1);
}





